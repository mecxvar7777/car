import pygame
import random
import math

# Initialize Pygame
pygame.init()

# Set up the display
WIDTH = 800
HEIGHT = 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Car Driving Game")

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)
ORANGE = (255, 165, 0)

# Car properties
car_width = 60
car_height = 100
car_x = WIDTH // 2 - car_width // 2
car_y = HEIGHT - car_height - 20
car_speed = 5

# Obstacle properties
obstacle_width = 100
obstacle_height = 100
obstacle_speed = 5
obstacle_frequency = 25
obstacles = []

# Game properties
clock = pygame.time.Clock()
score = 0
font = pygame.font.Font(None, 36)

# Particle system
particles = []

# Screen shake
shake_intensity = 0
shake_decay = 0.9


class Particle:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.vx = random.uniform(-3, 3)
        self.vy = random.uniform(-3, 3)
        self.radius = random.randint(2, 5)
        self.color = random.choice([RED, ORANGE, YELLOW])
        self.lifetime = random.randint(30, 60)

    def update(self):
        self.x += self.vx
        self.y += self.vy
        self.lifetime -= 1

    def draw(self, surface):
        pygame.draw.circle(surface, self.color, (int(self.x), int(self.y)), self.radius)


def create_particles(x, y, num_particles):
    for _ in range(num_particles):
        particles.append(Particle(x, y))


def update_particles():
    for particle in particles[:]:
        particle.update()
        if particle.lifetime <= 0:
            particles.remove(particle)


def draw_particles(surface):
    for particle in particles:
        particle.draw(surface)


def draw_car(x, y):
    # Car body
    pygame.draw.rect(screen, RED, (x, y + 20, car_width, car_height - 20))

    # Car roof
    pygame.draw.polygon(screen, RED, [
        (x + 10, y + 20),
        (x + car_width - 10, y + 20),
        (x + car_width - 20, y),
        (x + 20, y)
    ])

    # Windows
    pygame.draw.rect(screen, BLUE, (x + 10, y + 5, 15, 15))
    pygame.draw.rect(screen, BLUE, (x + car_width - 25, y + 5, 15, 15))

    # Wheels
    pygame.draw.circle(screen, BLACK, (x + 15, y + car_height), 10)
    pygame.draw.circle(screen, BLACK, (x + car_width - 15, y + car_height), 10)

    # Headlights
    pygame.draw.circle(screen, YELLOW, (x + 10, y + car_height - 10), 5)
    pygame.draw.circle(screen, YELLOW, (x + car_width - 10, y + car_height - 10), 5)


def draw_obstacle(x, y):
    pygame.draw.rect(screen, BLACK, (x, y, obstacle_width, obstacle_height))


def show_score():
    score_text = font.render(f"Score: {score}", True, BLACK)
    screen.blit(score_text, (10, 10))


def apply_screen_shake():
    global shake_intensity
    dx = random.uniform(-shake_intensity, shake_intensity)
    dy = random.uniform(-shake_intensity, shake_intensity)
    screen.blit(screen, (dx, dy))
    shake_intensity *= shake_decay


# Game loop
running = True
game_over = False
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if game_over and event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                # Reset game
                car_x = WIDTH // 2 - car_width // 2
                obstacles = []
                score = 0
                particles = []
                game_over = False

    if not game_over:
        # Move the car
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT] and car_x > 0:
            car_x -= car_speed
        if keys[pygame.K_RIGHT] and car_x < WIDTH - car_width:
            car_x += car_speed

        # Create new obstacles
        if random.randint(1, obstacle_frequency) == 1:
            obstacle_x = random.randint(0, WIDTH - obstacle_width)
            obstacles.append([obstacle_x, -obstacle_height])

        # Move obstacles and check for collisions
        for obstacle in obstacles[:]:
            obstacle[1] += obstacle_speed
            if obstacle[1] > HEIGHT:
                obstacles.remove(obstacle)
                score += 1
            elif (car_x < obstacle[0] + obstacle_width and
                  car_x + car_width > obstacle[0] and
                  car_y < obstacle[1] + obstacle_height and
                  car_y + car_height > obstacle[1]):
                print(f"Game Over! Final Score: {score}")
                create_particles(car_x + car_width // 2, car_y + car_height // 2, 100)
                shake_intensity = 20
                game_over = True

    # Update particles
    update_particles()

    # Draw everything
    screen.fill(WHITE)
    if not game_over:
        draw_car(car_x, car_y)
    for obstacle in obstacles:
        draw_obstacle(obstacle[0], obstacle[1])
    draw_particles(screen)
    show_score()

    if game_over:
        game_over_text = font.render("Game Over! Press SPACE to restart", True, BLACK)
        screen.blit(game_over_text, (WIDTH // 2 - game_over_text.get_width() // 2, HEIGHT // 2))

    # Apply screen shake
    if shake_intensity > 0.1:
        apply_screen_shake()

    # Update the display
    pygame.display.flip()

    # Control the game speed
    clock.tick(60)

pygame.quit()
